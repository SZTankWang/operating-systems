CSUH- 3010
Operating System 
Programming Assignment 1
Zhenming Wang
NetID: zw1806

Documentation for `mvote`
	
{section1} Data Structures
__________________________________

I identify two major data structures for mvote: a hash table which stores all voters' information; a linked list of zip code which holds the information of voters living in each zipcode area. 

Since we are using seperate chaining to handle collisions, the hash table can be viewed as two parts: a slot array and {bucketSize} number of linked list. The slot array holds pointer to voters, and voters with identical hashing value
make up a linked list.

The linked list of zip code is in fact a linked list of linked list. Each node on the list stores a pointer to a linked list of voted people's record living in that area. 

__________________________________

{section 2} Software Architecture
__________________________________

Data Structure Class: 
	Hashtable: hashtable.cpp |  voter.cpp | 
	Zipcode List: posCodeList.cpp | posNode.cpp 
	Voted People List (per zip code): voted.cpp

Data Object:
	Info(used for carrying query): info.cpp

Utility classes: 
	helper.cpp	

_________________________________

{section 3} Design Decisions
_________________________________

+ size of hash table: currently, user would need to specify the desired number of bucket size. 

+ dynamically allocated memory: Everything is dynamic in my implementation of mvote. No memory space is reserved in advance. When a new voter record comes in, allocate a new chunk of memory for it. 
When a voter has to be deleted, then its memory space gets freed. If this voter has voted before, then the node on the Voted People List which contains a pointer to this voter also gets deleted and its memory gets freed.

+ Effective sorting method: To output the zip code in DESC order of voted people, I utilize the concept of selection sort. I do not want to change the physical order of the zipcode nodes in the linked list, therefore, I designed
a flag in zipcode nodes. This flag is set to positive when it has been selected in previous traversal as the largest number and get outputed. Therefore, the flag can be used to tell if current node are eligible to be selected as 
a local maximum again, and we would not repeatedly select a certain zipcode. 
